=head1 NAME

XML::Compile::WSDL11 - create SOAP messages defined by WSDL 1.1

=head1 INHERITANCE

 XML::Compile::WSDL11
   is a XML::Compile

=head1 SYNOPSIS

 # preparation
 my $wsdl    = XML::Compile::WSDL11->new($xml);
 my $schemas = $wsdl->schemas;
 my $op      = $wsdl->operation('GetStockPrice');

=head1 DESCRIPTION

### This module is UNDER CONSTRUCTION.  It will only evolve with your
help.  Please contact the author when you have something to contribute.
On the moment, the development is primarily targeted to support the
CPAN6 development.  You can change that with money or time.

Missing: pure HTTP GET/POST bindings; multipart-mime; XML-RPC
###

An WSDL file defines a set of schemas and how to use the defined
types using SOAP connections.  The parsing is based on the WSDL
schema.  The WSDL definition can get constructed from multiple
XML trees, each added with L<addWSDL()|XML::Compile::WSDL11/"Extension">.

WSDL defines object with QNAMES: name-space qualified names.  When you
specify such a name, you have to explicitly mention the name-space IRI,
not the prefix as used in the WSDL file.  This is because prefixes may
change without notice.

The defined QNAMES are only unique within their CLASS.  Defined
CLASS types are: service, message, bindings, and portType.

=head1 METHODS

=head2 Constructors

XML::Compile::WSDL11-E<gt>B<new>(XML, OPTIONS)

=over 4

The XML is the WSDL file, which is anything accepted by
XML::Compile subroutine dataToXML.  All options are also passed
to create an internal XML::Compile::Schema object.  See
XML::Compile::Schema subroutine new

 Option        --Default
 wsdl_namespace  undef

. wsdl_namespace => IRI

=over 4

Force to accept only WSDL descriptions which are in this namespace.  If
not specified, the name-space is enforced which is found in the first WSDL
document.

=back

=back

=head2 Accessors

$obj-E<gt>B<schemas>

=over 4

Returns the XML::Compile::Schema object which collects all type
information.

=back

$obj-E<gt>B<wsdlNamespace>([NAMESPACE])

=over 4

Returns (optionally after setting) the namespace used by the WSDL
specification.  This is the namespace in which the C<definition>
document root element is defined.

=back

=head2 Extension

$obj-E<gt>B<addWSDL>(XMLDATA)

=over 4

Some XMLDATA, accepted by XML::Compile subroutine dataToXML is provided,
which should represent the top-level of a (partial) WSDL document.
The specification can be spread over multiple files, which each have a
C<definition> root element.

=back

$obj-E<gt>B<importDefinitions>(XMLDATA, OPTIONS)

=over 4

Add schema information to the WSDL interface knowledge.  This should
not be needed, because WSDL definitions must be self-contained.

=back

$obj-E<gt>B<namesFor>(CLASS)

=over 4

Returns the list of names available for a certain definition
CLASS in the WSDL.

=back

$obj-E<gt>B<operation>([NAME], OPTIONS)

=over 4

Collect all information for a certain operation.  Returned is an
L<XML::Compile::WSDL11::Operation|XML::Compile::WSDL11::Operation> object.

An operation is defined by a service name, a port, some bindings,
and an operation name, which can be specified explicitly or sometimes
left-out.

When not specified explicitly via OPTIONS, each of the CLASSes are only
permitted to have exactly one definition.  Otherwise, you must make a
choice explicitly.  There is a very good reason to be not too flexible
in this area: developers need to be aware when there are choices, where
some flexibility is required.

 Option   --Default
 operation  <required>
 port       <required>
 service    <required>

. operation => NAME

=over 4

Optional when the parameter list starts with a NAME (which is an
alternative for this option).  Also optional when there is only
one operation defined within the portType.

=back

. port => NAME

=over 4

Optional when the selected service has only one port.

=back

. service => QNAME

=over 4

Optional when exactly one service is defined.

=back

=back

$obj-E<gt>B<prepareClient>([NAME], OPTIONS)

=over 4

Creates temporarily an L<XML::Compile::WSDL11::Operation|XML::Compile::WSDL11::Operation> with L<operation()|XML::Compile::WSDL11/"Extension">,
and then calls C<prepareClient()> on that; an usual combination.

As OPTIONS are available the combination of all possibilities for
L<operation()|XML::Compile::WSDL11/"Extension"> and all of L<XML::Compile::WSDL11::Operation::prepareClient()|XML::Compile::WSDL11::Operation/"Handlers">.
For instance, C<transport_hook>.

=back

=head2 Inspection

All of the following methods are usually NOT meant for end-users. End-users
should stick to the L<operation()|XML::Compile::WSDL11/"Extension"> and L<prepareClient()|XML::Compile::WSDL11/"Extension"> methods.

$obj-E<gt>B<find>(CLASS, [QNAME])

=over 4

With a QNAME, the HASH which contains the parsed XML information
from the WSDL template for that CLASS-NAME combination is returned.
When the NAME is not found, an error is produced.

Without QNAME in SCALAR context, there may only be one such name
defined otherwise an error is produced.  In LIST context, all definitions
in CLASS are returned.

=back

$obj-E<gt>B<index>([CLASS, [QNAME]])

=over 4

With a CLASS and QNAME, it returns one WSDL definition HASH or undef.
Returns the index for the CLASS group of names as HASH.  When no CLASS is
specified, a HASH of HASHes is returned with the CLASSes on the top-level.

=back

=head1 SEE ALSO

This module is part of XML-Compile-SOAP distribution version 0.55,
built on October 03, 2007. Website: F<http://perl.overmeer.net/xml-compile/>

=head1 LICENSE

Copyrights 2007 by Mark Overmeer. For other contributors see ChangeLog.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
See F<http://www.perl.com/perl/misc/Artistic.html>

